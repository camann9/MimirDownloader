{"assignment":{"id":"158eca8e-13e0-43ec-b6d0-f7e80a935988","courseId":"42769ca5-5b28-46e0-b4bb-d3d3858ce8f8","name":"Homework 9 - arrays, including loops","description":"","status":"active","openDate":"2018-10-12T16:30:00.000Z","dueDate":"2018-10-19T03:59:59.000Z","lateDays":3,"lateDayPenalty":10.0,"questionOrder":["530df017-01e2-4ca9-89bc-b95d831f0220","15d9863e-42a0-4e6d-876d-1daa28080c62","2a8647cc-74e9-4a93-bed1-25d238b93973","e4b327a1-b6b6-491b-8414-40ab109843ec"],"isRedesign":true},"questions":[{"id":"530df017-01e2-4ca9-89bc-b95d831f0220","prompt":"Fill and array and then compute with it","questionType":"code_area","promptImageName":null,"description":"<p>This question is similiar to the first part of Lab 8b.  Do the following steps:</p>\n<p> </p>\n<ol>\n<li>Create a class FillArray.</li>\n<li>Do your work in the main() method.</li>\n<li>Prompt the user with \"Enter a positive integer:\".</li>\n<li>Set up a Scanner to read from the keyboard and take in a positive integer <strong><span style=\"font-family: 'courier new', courier, monospace;\">arraySize</span></strong> from the user.</li>\n<li>Allocate an array whose length is <strong><span style=\"font-family: 'courier new', courier, monospace;\">arraySize</span></strong>.</li>\n<li>Loop over the elements of the array, assigning the value k*(k-1) to the array element at k (that is, fill array[k] with k*(k-1)).</li>\n<li>Now loop over the array again, summing up all the elements of the array.</li>\n<li>Print out the sum with \"Sum   = \" and the sum</li>\n<li>Also print out \"Check = \" and the value <strong><span style=\"font-family: 'courier new', courier, monospace;\">arraySize * (</span></strong><strong><span style=\"font-family: 'courier new', courier, monospace;\">arraySize - 1) * (</span></strong><strong><span style=\"font-family: 'courier new', courier, monospace;\">arraySize - 2) / 3</span></strong>\n</li>\n</ol>\n<p><span style=\"font-family: geomanist, sans-serif;\">In order to pass tests, use the following format:</span></p>\n<div>\n<pre class=\"frontend-shared-components-TerminalOutput-___TerminalOutput__terminal___3v07Z terminal-output\"><code>Enter a positive integer:\nSum   = &lt;&lt;your sum&gt;&gt;\nCheck = &lt;&lt;your check value&gt;&gt;\n</code></pre>\n</div>","points":25.0,"required":true,"status":"active","choices":["","","",""],"correctChoiceIndex":0,"correctMultiIndexes":[],"solutionComments":[]},{"id":"15d9863e-42a0-4e6d-876d-1daa28080c62","prompt":"Array of random numbers","questionType":"code_area","promptImageName":null,"description":"<p>In this problem you'll get to use one of Java's random number generators, java.util.Random (see the <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Random.html\">docs for Random</a>).  This class generates a random double precision number uniformly distributed in the range <span style=\"font-family: 'courier new', courier, monospace;\"><strong>[0.0 ... 1.0)</strong></span>.  That is, the numbers go from 0 to 1, including 0 but excluding 1. It is a common need in Java programming to generate a random integer number that's uniformly distributed in the range of <span style=\"font-family: 'courier new', courier, monospace;\"><strong>[0 ... n)</strong></span>, such as we saw in the dice rolling question a few weeks ago for n=6.  The code to do this looks like:</p>\n<p><span style=\"font-family: 'courier new', courier, monospace;\">double randomDouble = n * randomGenerator.nextDouble();</span></p>\n<p> </p>\n<p>Do the following steps:</p>\n<ol>\n<li>Create a class FillRandom.</li>\n<li>Do your work in the fillRandom() method.</li>\n<li>Prompt the user with \"Enter a positive integer:\".</li>\n<li>Set up a Scanner to read from the keyboard and take in a positive integer <strong><span style=\"font-family: 'courier new', courier, monospace;\">randomSize</span></strong> from the user.</li>\n<li>Allocate a double array whose length is 1,000,000.</li>\n<li>Loop over the elements of the array, assigning array[k] the next double random number between 0 and <strong><span style=\"font-family: 'courier new', courier, monospace;\">randomSize</span></strong>. You will have to scale up the java.util.Random.nextRandom() value, which is in the range [0...1).  You want it to be in the range [0...randomSize).  So you must multiply it by randomSize, as shown in code above.</li>\n<li>Now loop over the array again, computing the min, max and average of its values.  You may want to use the Math.min() and Math.max() methods from <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Math.html\">java.lang.Math</a>. (<strong>SAVE YOUR CODE before clicking on this link)</strong>\n</li>\n<li>Print out the min value with \"Min     = \" and the minimum</li>\n<li>Print out the max value with \"Max     = \" and the maximum</li>\n<li>Print out the average with \"Average = \" and the average</li>\n</ol>\n<p><span style=\"font-family: geomanist, sans-serif;\">Notice that the minimum over many random numbers in [0...n) is close to zero, the max is close to n, and the average is close to n/2.</span></p>\n<p> </p>\n<p><span style=\"font-family: geomanist, sans-serif;\">In order to pass tests, use the following format:</span></p>\n<div>\n<pre class=\"frontend-shared-components-TerminalOutput-___TerminalOutput__terminal___3v07Z terminal-output\"><code>Enter a positive integer:\nMin     = &lt;&lt;your min&gt;&gt;\nMax     = &lt;&lt;your max&gt;&gt;<br>Average = &lt;&lt;your average&gt;&gt;</code></pre>\n</div>","points":25.0,"required":true,"status":"active","choices":["","","",""],"correctChoiceIndex":0,"correctMultiIndexes":[],"solutionComments":[]},{"id":"2a8647cc-74e9-4a93-bed1-25d238b93973","prompt":"Arrays and methods","questionType":"code_area","promptImageName":null,"description":"<p>Java allows an array as input parameter to a method.  It also allows an array as return value from a method.  The problem has you doing both of these operations.</p>\n<p> </p>\n<p>Do these steps:</p>\n<ol>\n<li>Create a class ArrayHandler.  Its purpose is to allocate, fill and print an array.</li>\n<li>Create a public non-static method allocateStringArray(), which takes an integer parameter <span style=\"font-family: 'courier new', courier, monospace;\"><strong>size</strong></span> and returns a String array of length <span style=\"font-family: 'courier new', courier, monospace;\"><strong>size</strong></span>.</li>\n<li>Create a public non-static method fillArray(), which takes a String array parameter and stores in it the top ten NC city names from this list (if the array size is less than 10, only store the top city names that will fit in the array).  The method has no return value.  Notice that this method is able to change the contents of an input parameter -- can you figure out how this works?? \n<ol>\n<li>\n<strong>SAVE YOUR CODE before clicking on any of these links.</strong> </li>\n<li>\n<table class=\"restable sortable\">\n<tbody>\n<tr>\n<td><small>1</small></td>\n<td>\n<a href=\"http://www.geonames.org/4460243/charlotte.html\">Charlotte</a> </td>\n<td class=\"rightalign\">827,097</td>\n<td><a href=\"http://www.geonames.org/maps/browse_35.227_-80.843.html\" rel=\"nofollow\">35.227 / -80.843</a></td>\n</tr>\n<tr class=\"odd\">\n<td><small>2</small></td>\n<td>\n<a href=\"http://www.geonames.org/4487042/raleigh.html\">Raleigh</a> </td>\n<td class=\"rightalign\">451,066</td>\n<td><a href=\"http://www.geonames.org/maps/browse_35.772_-78.639.html\" rel=\"nofollow\">35.772 / -78.639</a></td>\n</tr>\n<tr>\n<td><small>3</small></td>\n<td>\n<a href=\"http://www.geonames.org/4469146/greensboro.html\">Greensboro</a> </td>\n<td class=\"rightalign\">285,342</td>\n<td><a href=\"http://www.geonames.org/maps/browse_36.073_-79.792.html\" rel=\"nofollow\">36.073 / -79.792</a></td>\n</tr>\n<tr class=\"odd\">\n<td><small>4</small></td>\n<td>\n<a href=\"http://www.geonames.org/4464368/durham.html\">Durham</a> </td>\n<td class=\"rightalign\">257,636</td>\n<td><a href=\"http://www.geonames.org/maps/browse_35.994_-78.899.html\" rel=\"nofollow\">35.994 / -78.899</a></td>\n</tr>\n<tr>\n<td><small>5</small></td>\n<td>\n<a href=\"http://www.geonames.org/4499612/winston-salem.html\">Winston-Salem</a> </td>\n<td class=\"rightalign\">241,218</td>\n<td><a href=\"http://www.geonames.org/maps/browse_36.1_-80.244.html\" rel=\"nofollow\">36.1 / -80.244</a></td>\n</tr>\n<tr class=\"odd\">\n<td><small>6</small></td>\n<td>\n<a href=\"http://www.geonames.org/4466033/fayetteville.html\">Fayetteville</a> </td>\n<td class=\"rightalign\">201,963</td>\n<td><a href=\"http://www.geonames.org/maps/browse_35.053_-78.878.html\" rel=\"nofollow\">35.053 / -78.878</a></td>\n</tr>\n<tr>\n<td><small>7</small></td>\n<td>\n<a href=\"http://www.geonames.org/4459467/cary.html\">Cary</a> </td>\n<td class=\"rightalign\">159,769</td>\n<td><a href=\"http://www.geonames.org/maps/browse_35.792_-78.781.html\" rel=\"nofollow\">35.792 / -78.781</a></td>\n</tr>\n<tr class=\"odd\">\n<td><small>8</small></td>\n<td>\n<a href=\"http://www.geonames.org/4499379/wilmington.html\">Wilmington</a> </td>\n<td class=\"rightalign\">115,933</td>\n<td><a href=\"http://www.geonames.org/maps/browse_34.226_-77.945.html\" rel=\"nofollow\">34.226 / -77.945</a></td>\n</tr>\n<tr>\n<td><small>9</small></td>\n<td>\n<a href=\"http://www.geonames.org/4471025/high-point.html\">High Point</a> </td>\n<td class=\"rightalign\">110,268</td>\n<td><a href=\"http://www.geonames.org/maps/browse_35.956_-80.005.html\" rel=\"nofollow\">35.956 / -80.005</a></td>\n</tr>\n<tr class=\"odd\">\n<td><small>10</small></td>\n<td>\n<a href=\"http://www.geonames.org/4469160/greenville.html\">Greenville</a> </td>\n<td class=\"rightalign\">90,597</td>\n<td><a href=\"http://www.geonames.org/maps/browse_35.613_-77.366.html\" rel=\"nofollow\">35.613 / -77.366</a></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n</li>\n<li>Create a public non-static method printArray(), which takes a String array and prints each element on a separate line.  printArray() has no return value.</li>\n<li> These methods will be called from the main program.</li>\n</ol>\n<p>Data source: http://www.geonames.org/US/NC/largest-cities-in-north-carolina.html</p>","points":25.0,"required":true,"status":"active","choices":["","","",""],"correctChoiceIndex":0,"correctMultiIndexes":[],"solutionComments":[]},{"id":"e4b327a1-b6b6-491b-8414-40ab109843ec","prompt":"More arrays and methods","questionType":"code_area","promptImageName":null,"description":"<p>Here we'll create an ArrayFunctions class with methods to compute min(), max() and average() on an input array.</p>\n<p> </p>\n<p>One noteworthy thing in this question is that you will write a min() method for int[] input and another min() method for double[] input.  Java allows to methods to have the same name but different parameter types -- this is called <strong>method overloading</strong>.  When you overload the method name, Java will figure out which one to call based on the type of the parameter.</p>\n<p> </p>\n<p>In class ArrayFunctions, create</p>\n<ol>\n<li>public static method arrayMin() taking int[] array and returning int, where returned value is min over all array elements.</li>\n<li>public static method arrayMin() taking double[] array and returning double, where returned value is min over all array elements.</li>\n<li>public static method arrayMax() taking int[] array and returning int, where returned value is max over all array elements.</li>\n<li>public static method arrayMax() taking double[] array and returning double, where returned value is max over all array elements.</li>\n<li>public static method arraySum() taking int[] array and returning int, where returned value is sum over all array elements.</li>\n<li>public static method arraySum() taking double[] array and returning double, where returned value is sum over all array elements.</li>\n</ol>\n<p>You might be able to use this code in lab.</p>\n<p> </p>\n<p>The main method and unit tests in Main.java will verify correctness.  Note that the Style Guide needs to have overlaoded methods (of the same name but different types) next to each other in the code.</p>\n<p> </p>\n<p>Remember to initialize the min and max variables with a smart value. The array[0] value is a good way to initialize.  The solution code uses a different way that you could learn about if you like.</p>","points":25.0,"required":true,"status":"active","choices":["","","",""],"correctChoiceIndex":0,"correctMultiIndexes":[],"solutionComments":[]}],"compilatorMap":{"__pairs__":[{"key":"530df017-01e2-4ca9-89bc-b95d831f0220","value":{"id":"d4d6fe16-3e97-4861-a7a8-c34cd1e069e5","testableId":"530df017-01e2-4ca9-89bc-b95d831f0220","type":"QuestionCompilator","status":"active","primaryLanguage":"java","executionType":"normal","createdAt":"2018-10-13T13:45:24.726Z","updatedAt":"2018-10-13T14:00:21.051Z","name":"Fill and array and then compute with it","perfectZipFileId":"e51b7382-ad27-40af-9028-e98db382e6f4","skeletonZipFileId":null,"dbSeedFileId":null,"mossResultsId":"141427920","perfectFilenames":["FillArray.java"],"perfectWorkingState":{"currentFilePath":"FillArray.java","fileMap":{"__pairs__":[{"key":"FillArray.java","value":{"key":"files/e51b7382-ad27-40af-9028-e98db382e6f4/contents/FillArray.java","path":"FillArray.java","filename":"FillArray.java","content":"import java.util.Scanner;\n\n// Class to do simple array assignment and reading.\npublic class FillArray {\n  public static void main(String[] args) {\n    // Read a positive integer from the keyboard.\n    System.out.println(\"Enter a positive integer:\");\n    Scanner keyboard = new Scanner(System.in);\n    int arraySize = keyboard.nextInt();\n    \n    // Allocate an array whose length is the integer you just read.\n    int[] array = new int[arraySize];\n    // fill array[k] with k*(k-1)).\n    for (int k = 0; k < array.length; k++) {\n      array[k] = k * (k - 1);\n    }\n\n    // Now loop over the array again, summing up the elements.\n    int sum = 0;\n    for (int k = 0; k < array.length; k++) {\n      sum += array[k];\n    }\n    \n    // Print out the sum and check value.\n    System.out.println(\"Sum   = \" + sum);\n    System.out.println(\"Check = \" + arraySize * (arraySize - 1) * (arraySize - 2) / 3);\n  }\n}"}}]}},"skeletonWorkingState":{"currentFilePath":null,"fileMap":{"__pairs__":[]}},"testCases":[{"id":"99040731-fc7e-4aa9-92c6-655a5b1625a4","compilatorId":"d4d6fe16-3e97-4861-a7a8-c34cd1e069e5","name":"Test 1 - 10","description":"","status":"active","isPartialCredit":false,"testingStatus":"working","mainFile":"FillArray.java","testType":"io","visibility":"visible","createdAt":"2018-10-13T13:45:43.763Z","updatedAt":"2018-10-13T14:00:23.828Z","userVisibility":"visible","weight":5.0,"threshold":100.0,"useTemplateLanguage":false,"failText":"","input":"10\n","postHook":"","executionClargs":"","compileClargs":"","perfectOutput":"Enter a positive integer:\nSum   = 240\nCheck = 240\n","expectedOutput":"Enter a positive integer:\nSum   = 240\nCheck = 240\n"},{"id":"39fcb4a1-78b4-48a5-8370-a6b183c7617d","compilatorId":"d4d6fe16-3e97-4861-a7a8-c34cd1e069e5","name":"Test 3 - 1","description":"","status":"active","isPartialCredit":false,"testingStatus":"working","mainFile":"FillArray.java","testType":"io","visibility":"visible","createdAt":"2018-10-13T13:52:27.883Z","updatedAt":"2018-10-13T14:00:24.915Z","userVisibility":"visible","weight":5.0,"threshold":100.0,"useTemplateLanguage":false,"failText":"","input":"1\n","postHook":"","executionClargs":"","compileClargs":"","perfectOutput":"Enter a positive integer:\nSum   = 0\nCheck = 0\n","expectedOutput":"Enter a positive integer:\nSum   = 0\nCheck = 0\n"},{"id":"98db39c7-c504-41d2-b3cd-02e6f2c23f3a","compilatorId":"d4d6fe16-3e97-4861-a7a8-c34cd1e069e5","name":"Test 2 - 100","description":"","status":"active","isPartialCredit":false,"testingStatus":"working","mainFile":"FillArray.java","testType":"io","visibility":"visible","createdAt":"2018-10-13T13:52:04.026Z","updatedAt":"2018-10-13T14:00:24.954Z","userVisibility":"visible","weight":5.0,"threshold":100.0,"useTemplateLanguage":false,"failText":"","input":"100\n","postHook":"","executionClargs":"","compileClargs":"","perfectOutput":"Enter a positive integer:\nSum   = 323400\nCheck = 323400\n","expectedOutput":"Enter a positive integer:\nSum   = 323400\nCheck = 323400\n"},{"id":"52d495e7-bff9-4cf0-aee3-36fd56ebb8d5","compilatorId":"d4d6fe16-3e97-4861-a7a8-c34cd1e069e5","name":"Test 4 - GIR Java Style","description":"","status":"active","isPartialCredit":false,"testingStatus":"working","mainFile":"FillArray.java","testType":"custom","visibility":"visible","createdAt":"2018-10-13T13:59:48.093Z","updatedAt":"2018-10-13T14:00:24.210Z","userVisibility":"visible","weight":5.0,"threshold":100.0,"useTemplateLanguage":false,"failText":"","input":"java -jar checkstyle-8.12-all.jar -c ./google_checks.xml FillArray.java > DEBUG 2>&1\r\nif [ $? -eq 0 ]; then\r\n    echo true > OUTPUT\r\nelse\r\n    echo false > OUTPUT\r\nfi","postHook":"","executionClargs":"","compileClargs":"","perfectOutput":"true\n","expectedOutput":""}]}},{"key":"15d9863e-42a0-4e6d-876d-1daa28080c62","value":{"id":"fae21fcd-9485-47dd-bceb-c4afee57c290","testableId":"15d9863e-42a0-4e6d-876d-1daa28080c62","type":"QuestionCompilator","status":"active","primaryLanguage":"java","executionType":"normal","createdAt":"2018-10-13T14:18:17.708Z","updatedAt":"2018-10-13T14:40:07.254Z","name":"Array of random numbers","perfectZipFileId":"39bde5cd-c0ca-45d0-acfc-5fb284b82454","skeletonZipFileId":"df977d25-ff8a-4e28-ac13-70303865dc96","dbSeedFileId":null,"mossResultsId":"883032537","perfectFilenames":["FillRandom.java"],"perfectWorkingState":{"currentFilePath":"FillRandom.java","fileMap":{"__pairs__":[{"key":"FillRandom.java","value":{"key":"files/39bde5cd-c0ca-45d0-acfc-5fb284b82454/contents/FillRandom.java","path":"FillRandom.java","filename":"FillRandom.java","content":"import java.util.Random;\nimport java.util.Scanner;\n\n// Class to do array assignment and reading.\npublic class FillRandom {\n  private static final int constArraySize = 1000000;\n  \n  public static void fillRandom(Random randomGenerator) {\n    // Read a positive integer from the keyboard.\n    System.out.println(\"Enter a positive integer:\");\n    Scanner keyboard = new Scanner(System.in);\n    int randomSize = keyboard.nextInt();\n    \n    // Allocate an array of constArraySize doubles.\n    double[] randoms = new double[constArraySize];\n    // fill array[k] with random numbers in [0...randomSize).\n    for (int k = 0; k < randoms.length; k++) {\n      randoms[k] = randomSize * randomGenerator.nextDouble();\n    }\n\n    // Now loop over the array again, computing min, max and average.\n    double min = randoms[0];\n    double max = randoms[0];\n    double sum = 0.0;\n    for (int k = 0; k < randoms.length; k++) {\n      sum += randoms[k];\n      min = Math.min(min, randoms[k]);\n      max = Math.max(max, randoms[k]);\n    }\n    \n    // Print out the sum and check value.\n    System.out.println(\"Min     = \" + min);\n    System.out.println(\"Max     = \" + max);\n    System.out.println(\"Average = \" + sum / (randoms.length));\n  }\n  \n  public static void main(String[] args) {\n    Random randomGenerator;\n    int seed = 314159265;\n    if (args.length > 0) {\n      seed = Integer.parseInt(args[0]);\n    }\n    randomGenerator = new Random(seed);\n    \n    // Call the student's function to do the rest of the work.\n    fillRandom(randomGenerator);\n  }\n}"}}]}},"skeletonWorkingState":{"currentFilePath":"FillRandom.java","fileMap":{"__pairs__":[{"key":"FillRandom.java","value":{"key":"files/df977d25-ff8a-4e28-ac13-70303865dc96/contents/FillRandom.java","path":"FillRandom.java","filename":"FillRandom.java","content":"// TODO: Add necessary import statements for Scanner and Random.\n\n// Class to do array assignment and reading.\npublic class FillRandom {\n  private static final int constArraySize = 1000000;\n  \n  public static void fillRandom(Random randomGenerator) {\n    System.out.println(\"Enter a positive integer:\");\n    // TODO: Read a positive integer from the keyboard.\n    // TODO: Allocate an array of constArraySize doubles.\n    // TODO: Fill array[k] with random numbers in [0...randomSize).\n    // TODO: Loop over the array again, computing min, max and average.\n    // Print out the values. (Hint: these statements make use of variables you should declare above.)\n    System.out.println(\"Min     = \" + min);\n    System.out.println(\"Max     = \" + max);\n    System.out.println(\"Average = \" + average);\n  }\n  \n  public static void main(String[] args) {\n    // DO NOT MODIFY the main() method.\n    Random randomGenerator;\n    int seed = 314159265;\n    if (args.length > 0) {\n      seed = Integer.parseInt(args[0]);\n    }\n    randomGenerator = new Random(seed);\n    \n    // Call the student's function to do the rest of the work.\n    fillRandom(randomGenerator);\n  }\n}"}}]}},"testCases":[{"id":"51b882be-62ce-489c-a20f-7215bbdd6bd4","compilatorId":"fae21fcd-9485-47dd-bceb-c4afee57c290","name":"Test 2 - random in [0 ... 100), custom seed","description":"","status":"active","isPartialCredit":false,"testingStatus":"working","mainFile":"FillRandom.java","testType":"io","visibility":"visible","createdAt":"2018-10-13T14:32:24.225Z","updatedAt":"2018-10-13T14:40:10.047Z","userVisibility":"visible","weight":5.0,"threshold":100.0,"useTemplateLanguage":false,"failText":"","input":"100\n","postHook":"","executionClargs":"20181018","compileClargs":"","perfectOutput":"Enter a positive integer:\nMin     = 1.2686711248210969E-5\nMax     = 99.99999661957682\nAverage = 50.00704571901885\n","expectedOutput":"Enter a positive integer:\nMin     = 1.2686711248210969E-5\nMax     = 99.99999661957682\nAverage = 50.00704571901885\n"},{"id":"1a3029de-7ffb-4142-9af2-e5cc839d9561","compilatorId":"fae21fcd-9485-47dd-bceb-c4afee57c290","name":"Test 3 - GIR Java Style","description":"","status":"active","isPartialCredit":false,"testingStatus":"working","mainFile":"FillRandom.java","testType":"custom","visibility":"visible","createdAt":"2018-10-13T14:35:54.681Z","updatedAt":"2018-10-13T14:40:10.471Z","userVisibility":"visible","weight":5.0,"threshold":100.0,"useTemplateLanguage":false,"failText":"","input":"java -jar checkstyle-8.12-all.jar -c ./google_checks.xml FillRandom.java > DEBUG 2>&1\r\nif [ $? -eq 0 ]; then\r\n    echo true > OUTPUT\r\nelse\r\n    echo false > OUTPUT\r\nfi","postHook":"","executionClargs":"","compileClargs":"","perfectOutput":"true\n","expectedOutput":""},{"id":"66017867-99d8-4f88-b46a-fff903cf18f5","compilatorId":"fae21fcd-9485-47dd-bceb-c4afee57c290","name":"Test 1 - random in [0 ... 10), standard seed","description":"","status":"active","isPartialCredit":false,"testingStatus":"working","mainFile":"FillRandom.java","testType":"io","visibility":"visible","createdAt":"2018-10-13T14:24:03.570Z","updatedAt":"2018-10-13T14:40:10.210Z","userVisibility":"visible","weight":5.0,"threshold":100.0,"useTemplateLanguage":false,"failText":"","input":"10\n","postHook":"","executionClargs":"","compileClargs":"","perfectOutput":"Enter a positive integer:\nMin     = 1.5974883036395937E-5\nMax     = 9.999989290709944\nAverage = 4.998349696388127\n","expectedOutput":"Enter a positive integer:\nMin     = 1.5974883036395937E-5\nMax     = 9.999989290709944\nAverage = 4.998349696388127\n"}]}},{"key":"2a8647cc-74e9-4a93-bed1-25d238b93973","value":{"id":"9757967b-a921-4681-bf94-a434f5bb9013","testableId":"2a8647cc-74e9-4a93-bed1-25d238b93973","type":"QuestionCompilator","status":"active","primaryLanguage":"java","executionType":"normal","createdAt":"2018-10-13T15:12:48.427Z","updatedAt":"2018-10-13T15:35:29.037Z","name":"Arrays and methods","perfectZipFileId":"cfef80cc-776d-480c-9376-818bbf46cec6","skeletonZipFileId":"aff61ac2-7439-4042-b2b4-916e2f1e49de","dbSeedFileId":null,"mossResultsId":"342917104","perfectFilenames":["ArrayHandler.java"],"perfectWorkingState":{"currentFilePath":"ArrayHandler.java","fileMap":{"__pairs__":[{"key":"ArrayHandler.java","value":{"key":"files/cfef80cc-776d-480c-9376-818bbf46cec6/contents/ArrayHandler.java","path":"ArrayHandler.java","filename":"ArrayHandler.java","content":"// Create a class to allocate, fill and print an array.\npublic class ArrayHandler {\n  private String[] ncCityNames = {\"Charlotte\", \"Raleigh\", \"Greensboro\", \"Durham\", \"Winston-Salem\",\n      \"Fayetteville\", \"Cary\", \"Wilmington\", \"High Point\", \"Greenville\"};\n\n  // This method allocates and returns a String array of length size.\n  public String[] allocateStringArray(int size) {\n    return new String[size];\n  }\n  \n  // This method fills the top 10 NC city names into the input String parameter.\n  public void fillArray(String[] cityNames) {\n    int limit = Math.min(ncCityNames.length, cityNames.length);\n    for (int i = 0; i < limit; i++) {\n      cityNames[i] = ncCityNames[i];\n    }\n  }\n  \n  // This method prints each element of its input String array on a separate line.\n  public void printArray(String[] cityNames) {\n    for (int i = 0; i < cityNames.length; i++) {\n      System.out.println(cityNames[i]);\n    }\n  }\n  \n  // Main method to invoke all the member functions.\n  public static void main(String[] args) {\n    ArrayHandler handler = new ArrayHandler();\n    int size = 10;\n    String[] cityNames = handler.allocateStringArray(size);\n    handler.fillArray(cityNames);\n    handler.printArray(cityNames);\n  }\n}\n"}}]}},"skeletonWorkingState":{"currentFilePath":"ArrayHandler.java","fileMap":{"__pairs__":[{"key":"ArrayHandler.java","value":{"key":"files/aff61ac2-7439-4042-b2b4-916e2f1e49de/contents/ArrayHandler.java","path":"ArrayHandler.java","filename":"ArrayHandler.java","content":"// TODO: Create a class ArrayHandler to allocate, fill and print an array.\n// NOTE: The following indentation is correct, so may give you a hint to where to create your class.\n\n  // This private member variable of the class may be useful to you.\n  private String[] ncCityNames = {\"Charlotte\", \"Raleigh\", \"Greensboro\", \"Durham\", \"Winston-Salem\",\n      \"Fayetteville\", \"Cary\", \"Wilmington\", \"High Point\", \"Greenville\"};\n\n  // TODO: Create a method allocateStringArray.\n\n  // TODO: Create a method fillArray.\n\n  // TODO: Create a method printArray.\n\n  // Main method to invoke all the member functions.\n  // DO NOT MODIFY the main method.\n  public static void main(String[] args) {\n    ArrayHandler handler = new ArrayHandler();\n    int size = 10;\n    String[] cityNames = handler.allocateStringArray(size);\n    handler.fillArray(cityNames);\n    handler.printArray(cityNames);\n  }\n\n"}}]}},"testCases":[{"id":"a94084ac-ada9-42bd-bd81-915aac208e5a","compilatorId":"9757967b-a921-4681-bf94-a434f5bb9013","name":"Test 1 - run the code for 10 city output","description":"","status":"active","isPartialCredit":false,"testingStatus":"working","mainFile":"ArrayHandler.java","testType":"io","visibility":"visible","createdAt":"2018-10-13T15:21:13.536Z","updatedAt":"2018-10-13T15:23:36.684Z","userVisibility":"visible","weight":5.0,"threshold":100.0,"useTemplateLanguage":false,"failText":"","input":"","postHook":"","executionClargs":"","compileClargs":"","perfectOutput":"Charlotte\nRaleigh\nGreensboro\nDurham\nWinston-Salem\nFayetteville\nCary\nWilmington\nHigh Point\nGreenville\n","expectedOutput":"Charlotte\nRaleigh\nGreensboro\nDurham\nWinston-Salem\nFayetteville\nCary\nWilmington\nHigh Point\nGreenville\n"},{"id":"68a714aa-dbe9-41d7-a311-89ae9f1bdc8c","compilatorId":"9757967b-a921-4681-bf94-a434f5bb9013","name":"Test 3 - GIR Java Style","description":"","status":"active","isPartialCredit":false,"testingStatus":"working","mainFile":"ArrayHandler.java","testType":"custom","visibility":"visible","createdAt":"2018-10-13T15:36:21.442Z","updatedAt":"2018-10-13T15:36:33.332Z","userVisibility":"visible","weight":5.0,"threshold":100.0,"useTemplateLanguage":false,"failText":"","input":"java -jar checkstyle-8.12-all.jar -c ./google_checks.xml ArrayHandler.java > DEBUG 2>&1\r\nif [ $? -eq 0 ]; then\r\n    echo true > OUTPUT\r\nelse\r\n    echo false > OUTPUT\r\nfi","postHook":"","executionClargs":"","compileClargs":"","perfectOutput":"true\n","expectedOutput":""},{"id":"ac781bf3-d72b-4187-8fb5-ae18c9f62d71","compilatorId":"9757967b-a921-4681-bf94-a434f5bb9013","name":"Test 2 - Unit test ArrayHandler methods","description":"","status":"active","isPartialCredit":false,"testingStatus":"working","mainFile":"ArrayHandler.java","testType":"unit","visibility":"visible","createdAt":"2018-10-13T15:28:33.347Z","updatedAt":"2018-10-22T00:31:30.034Z","userVisibility":"visible","weight":5.0,"threshold":100.0,"useTemplateLanguage":false,"failText":"","input":"ArrayHandler handler = new ArrayHandler();\n// Verify that allocateStringArray() uses its input parameter.\nString[] output = handler.allocateStringArray(100);\nif (output == null || output.length != 100) {\n  System.err.println(\"Wrong length.\");\n  return false;\n}\n// Verify that the allocated array is empty.\nfor (int i = 0; i < output.length; i++) {\n  if (output[i] != null) {\n  \tSystem.err.println(\"Non-empty array elements\");\n  \treturn false;\n  }\n}\n\n// Verify that fillArray(n) works with n != 10.\n// First, expect no exceptions here.\nString[] ncCityNames = {\"Charlotte\", \"Raleigh\", \"Greensboro\", \"Durham\", \"Winston-Salem\",\n    \"Fayetteville\", \"Cary\", \"Wilmington\", \"High Point\", \"Greenville\"};\n\nString[] shortArray = new String[5];\nString[] longArray = new String[20];\nhandler.fillArray(shortArray);\nhandler.fillArray(longArray);\n\n/*\nfor (int i = 0; i < Math.min(ncCityNames.length, shortArray.length); i++) {\n  if (!ncCityNames[i].equals(shortArray[i])) {\n  \tSystem.err.println(\"Mismatch of city names in short array\");\n  \treturn false;\n  }\n}\n*/\n\nfor (int i = 0; i < Math.min(ncCityNames.length, longArray.length); i++) {\n  if (!ncCityNames[i].equals(longArray[i])) {\n  \tSystem.err.println(\"Mismatch of city names in long array\");\n  \treturn false;\n  }\n}\n\nreturn true;\n","postHook":"","executionClargs":"","compileClargs":"","perfectOutput":"","expectedOutput":""}]}},{"key":"e4b327a1-b6b6-491b-8414-40ab109843ec","value":{"id":"d1a3eef7-18c2-4965-b5b9-c3b701266076","testableId":"e4b327a1-b6b6-491b-8414-40ab109843ec","type":"QuestionCompilator","status":"active","primaryLanguage":"java","executionType":"normal","createdAt":"2018-10-13T20:49:34.009Z","updatedAt":"2018-10-13T21:29:42.072Z","name":"More arrays and methods","perfectZipFileId":"842fb2bf-3fc9-4330-9e18-a53bd5867341","skeletonZipFileId":"f4416803-755c-4579-ba8d-244ff474f4f8","dbSeedFileId":null,"mossResultsId":"916614068","perfectFilenames":["ArrayFunctions.java"],"perfectWorkingState":{"currentFilePath":"ArrayFunctions.java","fileMap":{"__pairs__":[{"key":"ArrayFunctions.java","value":{"key":"files/842fb2bf-3fc9-4330-9e18-a53bd5867341/contents/ArrayFunctions.java","path":"ArrayFunctions.java","filename":"ArrayFunctions.java","content":"// Class to build some functions that work on arrays.\npublic class ArrayFunctions {\n  // Return the min value over all array elements, or\n  // Integer.MAX_VALUE if the array has no elements.\n  public static int arrayMin(int[] array) {\n    if (array.length == 0) {\n      return Integer.MAX_VALUE;\n    }\n    int min = array[0];\n    for (int i = 0; i < array.length; i++) {\n      min = Math.min(min, array[i]);\n    }\n    return min;\n  }\n  \n  // Return the min value over all array elements, or\n  // Double.MAX_VALUE if the array has no elements.\n  public static double arrayMin(double[] array) {\n    if (array.length == 0) {\n      return Double.MAX_VALUE;\n    }\n    double min = array[0];\n    for (int i = 0; i < array.length; i++) {\n      min = Math.min(min, array[i]);\n    }\n    return min;\n  }\n  \n  // Return the max value over all array elements, or\n  // Integer.MIN_VALUE if the array has no elements.\n  public static int arrayMax(int[] array) {\n    if (array.length == 0) {\n      return Integer.MIN_VALUE;\n    }\n    int max = array[0];\n    for (int i = 0; i < array.length; i++) {\n      max = Math.max(max, array[i]);\n    }\n    return max;\n  }\n  \n  // Return the max value over all array elements, or\n  // Double.MIN_VALUE if the array has no elements.\n  public static double arrayMax(double[] array) {\n    if (array.length == 0) {\n      return Double.MIN_VALUE;\n    }\n    double max = array[0];\n    for (int i = 0; i < array.length; i++) {\n      max = Math.max(max, array[i]);\n    }\n    return max;\n  }\n  \n  // Return the sum over all array elements, or\n  // zero if the array has no elements.\n  public static int arraySum(int[] array) {\n    int sum = 0;\n    for (int i = 0; i < array.length; i++) {\n      sum += array[i];\n    }\n    return sum;\n  }\n  \n  // Return the sum over all array elements, or\n  // zero if the array has no elements.\n  public static double arraySum(double[] array) {\n    double sum = 0;\n    for (int i = 0; i < array.length; i++) {\n      sum += array[i];\n    }\n    return sum;\n  }\n  \n  // Main method to test out the ArrayFunctions methods.\n  public static void main(String[] args) {\n    int[] intArrayPositive = {5, 10, 21, 1, 7};\n    int[] intArrayNegative = {-3, -100, -45, -2};\n    double[] doubleArray = {3.14159, -1, 2.718281828, 2.0, -1.41421356};\n    \n    // Use methods on the int arrays.\n    System.out.println(\"posInt[] min = \" + ArrayFunctions.arrayMin(intArrayPositive));\n    System.out.println(\"negInt[] min = \" + ArrayFunctions.arrayMin(intArrayNegative));\n    System.out.println(\"posInt[] max = \" + ArrayFunctions.arrayMax(intArrayPositive));\n    System.out.println(\"negInt[] max = \" + ArrayFunctions.arrayMax(intArrayNegative));\n    System.out.println(\"posInt[] sum = \" + ArrayFunctions.arraySum(intArrayPositive));\n    System.out.println(\"negInt[] sum = \" + ArrayFunctions.arraySum(intArrayNegative));\n    // Use methods on the double array.\n    System.out.println(\"double[] min = \" + ArrayFunctions.arrayMin(doubleArray));\n    System.out.println(\"double[] max = \" + ArrayFunctions.arrayMax(doubleArray));\n    System.out.println(\"double[] sum = \" + ArrayFunctions.arraySum(doubleArray));\n  }\n\n}"}}]}},"skeletonWorkingState":{"currentFilePath":"ArrayFunctions.java","fileMap":{"__pairs__":[{"key":"ArrayFunctions.java","value":{"key":"files/f4416803-755c-4579-ba8d-244ff474f4f8/contents/ArrayFunctions.java","path":"ArrayFunctions.java","filename":"ArrayFunctions.java","content":"// TODO: Create ArrayFunctions class to build some functions that work on arrays.\n\n  // TODO: Create arrayMin() method with array of integer input and int return value.\n  // Return the min value in the array.\n\n  // TODO: Create arrayMin() method with array of double input and double return value.\n  // Return the min value in the array.\n\n  // TODO: Create arrayMax() method with array of integer input and int return value.\n  // Return the max value in the array.\n\n  // TODO: Create arrayMax() method with array of double input and double return value.\n  // Return the max value in the array.\n\n  // TODO: Create arraySum() method with array of integer input and int return value.\n  // Return the sum of values in the array.\n\n  // TODO: Create arraySum() method with array of double input and double return value.\n  // Return the sum of values in the array.\n\n  // Main method to test out the ArrayFunctions methods.\n  public static void main(String[] args) {\n    int[] intArrayPositive = {5, 10, 21, 1, 7};\n    int[] intArrayNegative = {-3, -100, -45, -2};\n    double[] doubleArray = {3.14159, -1, 2.718281828, 2.0, -1.41421356};\n    \n    // Use methods on the int arrays.\n    System.out.println(\"posInt[] min = \" + ArrayFunctions.arrayMin(intArrayPositive));\n    System.out.println(\"negInt[] min = \" + ArrayFunctions.arrayMin(intArrayNegative));\n    System.out.println(\"posInt[] max = \" + ArrayFunctions.arrayMax(intArrayPositive));\n    System.out.println(\"negInt[] max = \" + ArrayFunctions.arrayMax(intArrayNegative));\n    System.out.println(\"posInt[] sum = \" + ArrayFunctions.arraySum(intArrayPositive));\n    System.out.println(\"negInt[] sum = \" + ArrayFunctions.arraySum(intArrayNegative));\n    // Use methods on the double array.\n    System.out.println(\"double[] min = \" + ArrayFunctions.arrayMin(doubleArray));\n    System.out.println(\"double[] max = \" + ArrayFunctions.arrayMax(doubleArray));\n    System.out.println(\"double[] sum = \" + ArrayFunctions.arraySum(doubleArray));\n  }\n  \n  // TODO: Remember to end the class with } after the main method.\n"}}]}},"testCases":[{"id":"796b0eed-7ce7-42fb-97a3-5797fb1a8b70","compilatorId":"d1a3eef7-18c2-4965-b5b9-c3b701266076","name":"Test 1 - I/O using main() method","description":"","status":"active","isPartialCredit":false,"testingStatus":"working","mainFile":"ArrayFunctions.java","testType":"io","visibility":"visible","createdAt":"2018-10-13T21:06:36.068Z","updatedAt":"2018-10-13T21:29:44.512Z","userVisibility":"visible","weight":5.0,"threshold":100.0,"useTemplateLanguage":false,"failText":"","input":"","postHook":"","executionClargs":"","compileClargs":"","perfectOutput":"posInt[] min = 1\nnegInt[] min = -100\nposInt[] max = 21\nnegInt[] max = -2\nposInt[] sum = 44\nnegInt[] sum = -150\ndouble[] min = -1.41421356\ndouble[] max = 3.14159\ndouble[] sum = 5.445658267999999\n","expectedOutput":"posInt[] min = 1\nnegInt[] min = -100\nposInt[] max = 21\nnegInt[] max = -2\nposInt[] sum = 44\nnegInt[] sum = -150\ndouble[] min = -1.41421356\ndouble[] max = 3.14159\ndouble[] sum = 5.445658267999999\n"},{"id":"ddca888e-88b2-4a63-9f58-6915b522c7ef","compilatorId":"d1a3eef7-18c2-4965-b5b9-c3b701266076","name":"Test 3 - GIR Java Style","description":"","status":"active","isPartialCredit":false,"testingStatus":"working","mainFile":"ArrayFunctions.java","testType":"custom","visibility":"visible","createdAt":"2018-10-13T21:27:54.868Z","updatedAt":"2018-10-13T21:29:45.165Z","userVisibility":"visible","weight":5.0,"threshold":100.0,"useTemplateLanguage":false,"failText":"","input":"java -jar checkstyle-8.12-all.jar -c ./google_checks.xml ArrayFunctions.java > DEBUG 2>&1\r\nif [ $? -eq 0 ]; then\r\n    echo true > OUTPUT\r\nelse\r\n    echo false > OUTPUT\r\nfi","postHook":"","executionClargs":"","compileClargs":"","perfectOutput":"true\n","expectedOutput":""},{"id":"06860ed8-5ee7-4241-8957-2aacd90a2d14","compilatorId":"d1a3eef7-18c2-4965-b5b9-c3b701266076","name":"Test 2 - unit test","description":"","status":"active","isPartialCredit":false,"testingStatus":"working","mainFile":"ArrayFunctions.java","testType":"unit","visibility":"visible","createdAt":"2018-10-13T21:22:50.798Z","updatedAt":"2018-10-13T21:29:44.417Z","userVisibility":"visible","weight":5.0,"threshold":100.0,"useTemplateLanguage":false,"failText":"","input":"int constArrayLength = 100;\nint[] someInts = new int[constArrayLength];\ndouble[] someDoubles = new double[constArrayLength];\n\nfor (int i = 0; i < constArrayLength; i++) {\n  someInts[i] = ((int)Math.pow(-1, i)) * i;\n  someDoubles[i] = Math.pow(-1, i) * i;\n}\n\nint minInt = ArrayFunctions.arrayMin(someInts);\nint maxInt = ArrayFunctions.arrayMax(someInts);\nint sumInt = ArrayFunctions.arraySum(someInts);\n\ndouble minDouble = ArrayFunctions.arrayMin(someDoubles);\ndouble maxDouble = ArrayFunctions.arrayMax(someDoubles);\ndouble sumDouble = ArrayFunctions.arraySum(someDoubles);\n\nSystem.out.println(minInt);\nSystem.out.println(maxInt);\nSystem.out.println(sumInt);\n\nSystem.out.println(minDouble);\nSystem.out.println(maxDouble);\nSystem.out.println(sumDouble);\n\nif (minInt != -99) {\n  return false;\n}\nif (maxInt != 98) {\n  return false;\n}\nif (sumInt != -50) {\n  return false;\n}\n\nif (minDouble != -99.0) {\n  return false;\n}\nif (maxDouble != 98.0) {\n  return false;\n}\nif (sumDouble != -50.0) {\n  return false;\n}\n\nreturn true;\n","postHook":"","executionClargs":"","compileClargs":"","perfectOutput":"-99\n98\n-50\n-99.0\n98.0\n-50.0","expectedOutput":""}]}}]},"socketToken":"eyJhbGciOiJIUzUxMiJ9.eyJjaGFubmVsIjoiYXNzaWdubWVudHMvMTU4ZWNhOGUtMTNlMC00M2VjLWI2ZDAtZjdlODBhOTM1OTg4L3Rlc3RfY2FzZV9zdGF0dXMiLCJleHAiOjE1NDQ2NDgyMzJ9.8SYhC2rp36000X_3vFdtzzZUsRIKHvuHRF1HWmWJCGg9JdrvH8ye88oYyvXYwqFzs8UWBkjLOivh-M9NUaDoyw","socketChannel":"assignments/158eca8e-13e0-43ec-b6d0-f7e80a935988/test_case_status","course":{"id":"42769ca5-5b28-46e0-b4bb-d3d3858ce8f8","name":"COMP 163 Intro to Computer Programming (Sections 1, 2, 3)","description":"<p><span style=\"font-weight: 400;\">COMP163 is an introductory, 3 credit course in computer programming with no prerequisites.  Each section has a required weekly lab and TA recitation.</span></p>\n<p><span style=\"font-weight: 400;\">Problem solving techniques, writing algorithms and basics of software engineering will be taught using the Java programming language.  Students will write programs for such tasks as engineering decision-making and numerical computation. </span></p>\n<p><strong>Goals:</strong><span style=\"font-weight: 400;\">  Upon completion of this course, the student should be able to:</span></p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Design, implement, and evaluate an object-oriented program in Java to meet desired needs.</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Use current techniques, skills, and tools necessary to create and debug a program.</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Read a Java program and understand what the program is doing.</span></li>\n</ul>\n<p><span style=\"font-weight: 400;\">Topics to be covered include: data types, variables, expressions, input/output, Booleans and conditional statements, loops and arrays, algorithm design and computational thinking, objects, classes and inheritance, and Java GUIs.</span></p>","status":"active","startDate":"2018-08-15T02:44:37.000Z","endDate":"2019-01-01T03:44:00.000Z","showIde":true,"accessCode":"bf87b4fcf8","instructorAccessCode":"bf87b4fcf8-caf55812cb864b2c84c7","ltiSecret":"f11ca4ecbfb6277792b5665364f25833d3c7ccf4025a2aa7f420736037c87cf66a38c1f7944c1ea4","lmsXml":"\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <cartridge_basiclti_link xmlns=\"http://www.imsglobal.org/xsd/imslticc_v1p0\"\n    xmlns:blti = \"http://www.imsglobal.org/xsd/imsbasiclti_v1p0\"\n    xmlns:lticm =\"http://www.imsglobal.org/xsd/imslticm_v1p0\"\n    xmlns:lticp =\"http://www.imsglobal.org/xsd/imslticp_v1p0\"\n    xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation = \"http://www.imsglobal.org/xsd/imslticc_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imslticc_v1p0.xsd\n    http://www.imsglobal.org/xsd/imsbasiclti_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imsbasiclti_v1p0.xsd\n    http://www.imsglobal.org/xsd/imslticm_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imslticm_v1p0.xsd\n    http://www.imsglobal.org/xsd/imslticp_v1p0 http://www.imsglobal.org/xsd/lti/ltiv1p0/imslticp_v1p0.xsd\">\n    <blti:title>Mimir Classroom</blti:title>\n    <blti:description>Mimir Classroom&#x27;s LTI Connection</blti:description>\n    <blti:icon></blti:icon>\n    <blti:launch_url>https://class.mimir.io/users/lti_login</blti:launch_url>\n    <blti:extensions platform=\"canvas.instructure.com\">\n    <lticm:property name=\"tool_id\">mimir_platform</lticm:property>\n    <lticm:property name=\"privacy_level\">public</lticm:property>\n    <lticm:property name=\"domain\">https://class.mimir.io/users/lti_login</lticm:property>\n    </blti:extensions>\n    <cartridge_bundle identifierref=\"BLTI001_Bundle\"/>\n    <cartridge_icon identifierref=\"BLTI001_Icon\"/>\n    </cartridge_basiclti_link>\n  ","sectionSetting":"disabled","defaultLanguage":"java8","defaultDbLanguage":"sqlite"},"sectionMap":{"__pairs__":[]},"overrides":[],"canUpdate":true}